"use client";

import { useEffect, useState, useMemo } from "react";
import debounce from "lodash/debounce";
import { Product } from "@/types/types";
import Loading from "@/components/Loading";
import image1 from "@/app/assets/aluminium/aluminum-1.webp";
import image2 from "@/app/assets/aluminium/aluminum-2.webp";
import image3 from "@/app/assets/aluminium/aluminum-6.webp";
import Image from "next/image";

const images = [image1, image2, image3];

export default function ProductsPage() {
  const [products, setProducts] = useState<Product[]>([]);
  const [page, setPage] = useState(1);
  const [searchInput, setSearchInput] = useState(""); // raw input
  const [search, setSearch] = useState(""); // debounced value
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    const fetchProducts = async () => {
      setLoading(true);
      const res = await fetch(
        `/api/products?page=${page}&search=${encodeURIComponent(search)}`
      );
      const data = await res.json();
      setProducts(data.data);
      setLoading(false);
    };

    fetchProducts();
  }, [page, search]);

  // Debounce the actual search value
  const debouncedSearch = useMemo(
    () =>
      debounce((value: string) => {
        setPage(1); // reset to first page
        setSearch(value);
      }, 300), // debounce delay in ms
    []
  );

  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setSearchInput(value);
    debouncedSearch(value);
  };

  return (
    <section className="p-6">
      <div>
        <h1 className="text-4xl text-center font-bold my-4 md:my-20">
          üì¶ –ü—Ä–æ–¥—É–∫—Ç–∏
        </h1>
        <div
          className="relative grid w-full mt-16 gap-12 px-4 md:px-14 md:py-6 py-4 text-white
                           grid-cols-1 md:grid-cols-3"
        >
          {images &&
            images?.map((image, index) => (
              <div
                key={index}
                className="relative overflow-hidden rounded-lg shadow-lg hover:shadow-xl transition-shadow duration-300"
              >
                <Image
                  src={image}
                  alt={`Aluminium ${index + 1}`}
                  width={500}
                  height={500}
                  priority
                  className="w-full h-full object-cover object-center"
                />
              </div>
            ))}
        </div>
        <div className="text-center mb-8 m-auto">
          <h3 className="max-w-5xl text-center m-auto text-lg ">
            –ê–ª—É–º–∏–Ω–∏—É–º—Å–∫–∏ –ø—Ä–æ—Ñ–∏–ª–∏ –∑–∞ –ø—Ä–æ–∑–æ—Ä—Ü–∏, –≤—Ä–∞—Ç–∏, —Ñ–∞—Å–∞–¥–∏ –∏ –æ–≥—Ä–∞–¥–∏.
          </h3>
          <h3 className="max-w-5xl m-auto text-lg ">
            –ú–µ—Ö–∞–Ω–∏–∑–º–∏ –∏ —Ö–∞—Ä–¥–≤–µ—Ä: –º–µ–Ω—Ç–µ—à–∏, –∫–≤–∞–∫–∏—Ç–µ, –±—Ä–∞–≤–∏.
          </h3>
          <p className="max-w-5xl m-auto text-lg ">
            –î–æ–¥–∞—Ç–æ—Ü–∏ –∑–∞ –º–æ–Ω—Ç–∞–∂–µ—Ä–∏ –∏ –∑–∞–Ω–∞–µ—Ç—á–∏–∏.
          </p>

          <p className="max-w-5xl m-auto text-lg ">
            –ó–æ—à—Ç–æ –¥–∞ –æ–¥–±–µ—Ä–µ—Ç–µ –ñ–µ–ª–µ–∑–∞—Ä–∞ –í–µ—ò—Å–µ–ª–æ—Å–∫–∏? –í–∏—Å–æ–∫–æ–∫–≤–∞–ª–∏—Ç–µ—Ç–Ω–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏ –ø–æ
            –µ–≤—Ä–æ–ø—Å–∫–∏ —Å—Ç–∞–Ω–¥–∞—Ä–¥–∏. –°–æ—Ä–∞–±–æ—Ç–∫–∞ —Å–æ –¥–æ–∫–∞–∂–∞–Ω–∏ –±—Ä–µ–Ω–¥–æ–≤–∏ –∫–∞–∫–æ AKPA ‚Äì
            –¢—É—Ä—Ü–∏—ò–∞. –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∏ —Ü–µ–Ω–∏ –∏ –∑–∞–ª–∏—Ö–∞ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏. –°—Ç—Ä—É—á–Ω–∞ –∏
            –ø—Ä–∏—ò–∞—Ç–µ–ª—Å–∫–∞ —É—Å–ª—É–≥–∞. –ö–æ–Ω—Ç–∞–∫—Ç–∏—Ä–∞—ò—Ç–µ –Ω√® –∑–∞ –ø–æ–Ω—É–¥–∞, –∫–æ–Ω—Å—É–ª—Ç–∞—Ü–∏—ò–∞ –∏–ª–∏
            —Å–æ—Ä–∞–±–æ—Ç–∫–∞.
          </p>
          <p className="max-w-5xl m-auto font-bold text-lg ">
            –ñ–µ–ª–µ–∑–∞—Ä–∞ –í–µ—ò—Å–µ–ª–æ—Å–∫–∏ ‚Äì –∫–∞–¥–µ –∫–≤–∞–ª–∏—Ç–µ—Ç–æ—Ç –∏ –¥–æ–≤–µ—Ä–±–∞—Ç–∞ —Å–µ –æ—Å–Ω–æ–≤–∞ –Ω–∞
            —Å–µ–∫–æ—ò–∞ —É—Å–ø–µ—à–Ω–∞ –∑–¥–µ–ª–∫–∞.
          </p>
        </div>
      </div>
      <h1 className="text-4xl text-center font-bold my-4 md:my-20">
        üì¶ –°–∏—Ç–µ –ü—Ä–æ–¥—É–∫—Ç–∏
      </h1>

      <input
        type="text"
        placeholder="–ë–∞—Ä–∞—ò..."
        value={searchInput}
        onChange={handleSearchChange}
        className="w-full m-auto block md:w-1/2 p-2 mb-6 md:mb-12 border rounded-md"
      />

      {loading ? (
        <Loading />
      ) : (
        <>
          {products?.length === 0 || !products ? (
            <p className="text-2xl text-center p-6">
              –ù–µ —Å–µ –ø—Ä–æ–Ω–∞—ò–¥–µ–Ω–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏.
            </p>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {products?.map((product) => (
                <div
                  key={product.id}
                  className="border rounded-xl p-4 shadow-sm hover:shadow-md transition"
                >
                  <h3 className="text-xl font-semibold">{product.name}</h3>

                  <p>
                    <span className="font-medium">–¶–µ–Ω–∞:</span>{" "}
                    {parseFloat(product?.price_out).toFixed(2)} –¥–µ–Ω
                  </p>
                  <p>
                    <span className="font-medium">–î–î–í:</span> {product.tax_out}%
                  </p>
                </div>
              ))}
            </div>
          )}

          {/* Pagination Controls */}
          <div className="flex justify-center gap-4 mt-6">
            <button
              onClick={() => setPage((p) => Math.max(1, p - 1))}
              disabled={page === 1}
              className="px-4 py-2 bg-gray-200 rounded hover:bg-gray-300 disabled:opacity-50"
            >
              ‚¨Ö –ü—Ä–µ–¥—Ö–æ–¥–Ω–∞
            </button>
            <span className="self-center font-semibold">–°—Ç—Ä–∞–Ωa {page}</span>
            <button
              onClick={() => setPage((p) => p + 1)}
              disabled={products?.length < 100}
              className="px-4 py-2 bg-gray-200 rounded hover:bg-gray-300 disabled:opacity-50"
            >
              –°–ª–µ–¥–Ω–∞ ‚û°
            </button>
          </div>
        </>
      )}
    </section>
  );
}
